Index: src/main/java/com/kangjian/thriftstudy/ClientMain.java
===================================================================
--- src/main/java/com/kangjian/thriftstudy/ClientMain.java	(revision 77f7762f237d3772f4a6ff4b650836a335c18c37)
+++ src/main/java/com/kangjian/thriftstudy/ClientMain.java	(revision 77f7762f237d3772f4a6ff4b650836a335c18c37)
@@ -1,33 +0,0 @@
-package com.kangjian.thriftstudy;
-
-import org.apache.thrift.TException;
-import org.apache.thrift.TProcessorFactory;
-import org.apache.thrift.protocol.TBinaryProtocol;
-import org.apache.thrift.protocol.TProtocol;
-import org.apache.thrift.server.TServer;
-import org.apache.thrift.server.TThreadPoolServer;
-import org.apache.thrift.transport.TTransportException;
-import org.apache.thrift.transport.TServerSocket;
-import org.apache.thrift.transport.TTransport;
-import org.apache.thrift.transport.TFramedTransport;
-import org.apache.thrift.transport.TSocket;
-
-public class ClientMain {
-    private static int SERVICE_PORT = 8001;
-    private static int RPC_TIME_OUT = 10000;
-
-    private static void  buildRequest() throws TException {
-        String username = "test";
-        TTransport tTransport = new TFramedTransport(new TSocket("127.0.0.1", SERVICE_PORT, RPC_TIME_OUT));
-        tTransport.open();
-        TProtocol protocol = new TBinaryProtocol(tTransport);
-        HelloService.Client client = new HelloService.Client(protocol);
-
-        client.hello(username);
-        //System.out.println(result);
-    }
-
-    public static void main(String args[]) throws Exception{
-        buildRequest();
-    }
-}
Index: src/main/java/com/kangjian/thriftstudy/HelloServiceImpl.java
===================================================================
--- src/main/java/com/kangjian/thriftstudy/HelloServiceImpl.java	(revision 77f7762f237d3772f4a6ff4b650836a335c18c37)
+++ src/main/java/com/kangjian/thriftstudy/HelloServiceImpl.java	(revision 77f7762f237d3772f4a6ff4b650836a335c18c37)
@@ -1,13 +0,0 @@
-package com.kangjian.thriftstudy;
-
-import org.apache.thrift.async.AsyncMethodCallback;
-
-public class HelloServiceImpl implements HelloService.AsyncIface {
-
-    @Override
-    public void hello(String name, AsyncMethodCallback resultHandler) {
-        //resultHandler.onComplete("hahaha");
-        System.out.println("this is a test");
-    }
-}
-
Index: src/main/java/com/kangjian/thriftstudy/ServerMain.java
===================================================================
--- src/main/java/com/kangjian/thriftstudy/ServerMain.java	(revision 77f7762f237d3772f4a6ff4b650836a335c18c37)
+++ src/main/java/com/kangjian/thriftstudy/ServerMain.java	(revision 77f7762f237d3772f4a6ff4b650836a335c18c37)
@@ -1,48 +0,0 @@
-package com.kangjian.thriftstudy;
-
-import org.apache.thrift.TProcessor;
-import org.apache.thrift.TProcessorFactory;
-import org.apache.thrift.protocol.TBinaryProtocol;
-import org.apache.thrift.server.TServer;
-import org.apache.thrift.server.TThreadPoolServer;
-import org.apache.thrift.transport.TServerSocket;
-import org.apache.thrift.transport.TServerTransport;
-import org.apache.thrift.transport.TTransportException;
-
-public class ServerMain {
-
-    private static int SERVICE_PORT = 8001;
-    private static TServer server;
-
-    private static void startServer() throws TTransportException {
-
-//        TServerSocket tServer = new TServerSocket(SERVICE_PORT);
-//        TServer server = new TThreadPoolServer(new TThreadPoolServer.Args(tServer)
-//                .protocolFactory(new TBinaryProtocol.Factory(true, true))
-//                .processorFactory(new TProcessorFactory(new HelloService.AsyncProcessor<>(new HelloServiceImpl())))
-//                .minWorkerThreads(3)
-//                .maxWorkerThreads(5));
-//        System.out.println("service start...");
-//        server.serve();
-
-        TProcessor tProcessor = new HelloService.AsyncProcessor<HelloService.AsyncIface>(new HelloServiceImpl());
-
-
-        TServerTransport serverTransport = new TServerSocket(SERVICE_PORT);
-        server = new TThreadPoolServer(new TThreadPoolServer.Args(serverTransport)
-                .processorFactory(new TProcessorFactory(tProcessor))
-                .protocolFactory(new TBinaryProtocol.Factory(true, true)));
-    }
-
-    public static void main(String args[])throws  Exception {
-        startServer();
-//        new Thread(new Runnable() {
-//            @Override
-//            public void run() {
-//                System.out.println("Before Java8");
-//            }
-//        }).start();
-        new Thread(() -> server.serve()).start();
-
-    }
-}
Index: src/main/java/com/kangjian/tmp/Tmp5.java
===================================================================
--- src/main/java/com/kangjian/tmp/Tmp5.java	(revision 77f7762f237d3772f4a6ff4b650836a335c18c37)
+++ src/main/java/com/kangjian/tmp/Tmp5.java	(revision 77f7762f237d3772f4a6ff4b650836a335c18c37)
@@ -1,25 +0,0 @@
-package com.kangjian.tmp;
-
-import com.sun.deploy.security.ValidationState;
-
-/**
- * test for 范型
- */
-
-public class Tmp5 {
-    public static void main(String args[]){
-        String s = new Test<String>("kangjian").getT();
-        System.out.println(s);
-    }
-
-}
-class Test<TYPE>{
-    TYPE T;
-    Test(TYPE T){
-        this.T = T;
-    }
-    public TYPE getT(){
-        return this.T;
-    }
-}
-
Index: src/main/java/com/kangjian/springbootstudy/demo/Test.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/com/kangjian/springbootstudy/demo/Test.java	(date 1543747870000)
+++ src/main/java/com/kangjian/springbootstudy/demo/Test.java	(date 1543747870000)
@@ -0,0 +1,23 @@
+package com.kangjian.springbootstudy.demo;
+
+import org.springframework.stereotype.Component;
+
+import javax.annotation.PostConstruct;
+import javax.annotation.Resource;
+
+@Component
+public class Test {
+    @Resource
+    private ReadConf readConf;
+
+    private static Test test;
+    @PostConstruct
+    public void init() {
+        test = this;
+        test.readConf = this.readConf;
+    }
+
+    public static ReadConf getReadConf(){
+        return test.readConf;
+    }
+}
Index: src/main/java/com/kangjian/designpattern/prototypemodule/Main.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/com/kangjian/designpattern/prototypemodule/Main.java	(date 1543770750000)
+++ src/main/java/com/kangjian/designpattern/prototypemodule/Main.java	(date 1543770750000)
@@ -0,0 +1,18 @@
+package com.kangjian.designpattern.prototypemodule;
+
+public class Main {
+    public static void main(String args[]){
+       Manager manager = new Manager();
+       UnderlinePen underlinePen = new UnderlinePen('=');
+       MessageBox messageBox = new MessageBox('*');
+
+       manager.register("test", underlinePen);
+       manager.register("test1", messageBox);
+
+       Product p1 = manager.create("test");
+       p1.use("asdfsaf");
+       Product p2 = manager.create("test1");
+       p2.use("asdfasfsdfasdfasd");
+
+    }
+}
Index: src/main/java/com/kangjian/springbootstudy/demo/ReadConf.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/com/kangjian/springbootstudy/demo/ReadConf.java	(revision 77f7762f237d3772f4a6ff4b650836a335c18c37)
+++ src/main/java/com/kangjian/springbootstudy/demo/ReadConf.java	(date 1543747538000)
@@ -1,32 +1,26 @@
 package com.kangjian.springbootstudy.demo;
 
-import org.springframework.boot.context.properties.ConfigurationProperties;
-import org.springframework.stereotype.Component;
+import org.springframework.beans.factory.annotation.Value;
+import org.springframework.context.annotation.Configuration;
 
 
-
-@Component
-@ConfigurationProperties(prefix = "ss", ignoreUnknownFields = false)
+@Configuration
 public class ReadConf {
+
+
+    @Value("${ss.host}")
     private String host;
-    private int port;
-
-    public int getPort() {
-        return port;
-    }
+    //@Value("${ss.port}")
+    //private int port;
 
     public String getHost() {
         return host;
 
     }
 
-    public void setPort(int port) {
-
-        this.port = port;
-    }
-
     public void setHost(String host) {
 
         this.host = host;
     }
+
 }
Index: src/main/java/com/kangjian/springbootstudy/SpringBootMain.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/com/kangjian/springbootstudy/SpringBootMain.java	(revision 77f7762f237d3772f4a6ff4b650836a335c18c37)
+++ src/main/java/com/kangjian/springbootstudy/SpringBootMain.java	(date 1543747986000)
@@ -1,6 +1,8 @@
 package com.kangjian.springbootstudy;
 
 import com.kangjian.springbootstudy.demo.ReadConf;
+import com.kangjian.springbootstudy.demo.Test;
+import org.junit.BeforeClass;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.boot.CommandLineRunner;
 import org.springframework.boot.autoconfigure.SpringBootApplication;
@@ -8,24 +10,16 @@
 import org.springframework.boot.context.properties.EnableConfigurationProperties;
 import org.springframework.context.ApplicationContext;
 import org.springframework.context.annotation.Bean;
+import org.springframework.stereotype.Component;
 
 @SpringBootApplication
-@EnableConfigurationProperties
 public class SpringBootMain {
 
     @Autowired
     private ReadConf readConf;
 
     public static void main(String args[]) {
-        SpringApplication.run(SpringBootMain.class, args);
+       SpringApplication.run(SpringBootMain.class, args);
+       System.out.println(Test.getReadConf().getHost() + "asdfsafdsfsf");
     }
-
-    @Bean
-    public CommandLineRunner commandLineRunner(ApplicationContext ctx) {
-        return args -> {
-            System.out.println(readConf.getPort());
-            System.out.println(readConf.getHost());
-        };
-    }
-
 }
Index: src/main/java/com/kangjian/designpattern/prototypemodule/Product.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/com/kangjian/designpattern/prototypemodule/Product.java	(date 1543770750000)
+++ src/main/java/com/kangjian/designpattern/prototypemodule/Product.java	(date 1543770750000)
@@ -0,0 +1,6 @@
+package com.kangjian.designpattern.prototypemodule;
+
+public interface Product extends Cloneable{
+    public abstract void use(String s);
+    public abstract Product createClone();
+}
Index: src/main/java/com/kangjian/annotation/TestAnnotation.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/com/kangjian/annotation/TestAnnotation.java	(date 1543594587000)
+++ src/main/java/com/kangjian/annotation/TestAnnotation.java	(date 1543594587000)
@@ -0,0 +1,9 @@
+package com.kangjian.annotation;
+
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
+
+@Retention(RetentionPolicy.RUNTIME)
+public @interface TestAnnotation {
+
+}
Index: src/main/java/com/kangjian/designpattern/prototypemodule/Manager.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/com/kangjian/designpattern/prototypemodule/Manager.java	(date 1543769386000)
+++ src/main/java/com/kangjian/designpattern/prototypemodule/Manager.java	(date 1543769386000)
@@ -0,0 +1,15 @@
+package com.kangjian.designpattern.prototypemodule;
+
+import java.util.HashMap;
+
+public class Manager {
+    private HashMap showcase = new HashMap();
+    public void register(String name, Product product) {
+        showcase.put(name, product);
+    }
+
+    public Product create(String protoName) {
+        Product p = (Product) showcase.get(protoName);
+        return p.createClone();
+    }
+}
Index: src/main/java/com/kangjian/annotation/Test.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/com/kangjian/annotation/Test.java	(date 1543593976000)
+++ src/main/java/com/kangjian/annotation/Test.java	(date 1543593976000)
@@ -0,0 +1,8 @@
+package com.kangjian.annotation;
+
+@TestAnnotation
+public class Test {
+    public static void main(String args[]){
+        System.out.println("test");
+    }
+}
Index: src/main/java/com/kangjian/designpattern/prototypemodule/MessageBox.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/com/kangjian/designpattern/prototypemodule/MessageBox.java	(date 1543770260000)
+++ src/main/java/com/kangjian/designpattern/prototypemodule/MessageBox.java	(date 1543770260000)
@@ -0,0 +1,35 @@
+package com.kangjian.designpattern.prototypemodule;
+
+public class MessageBox implements Product{
+
+    private char decochar;
+
+    public MessageBox(char decochar){
+        this.decochar = decochar;
+    }
+
+    @Override
+    public void use(String s) {
+       int length = s.getBytes().length;
+       for(int x = 0; x< length + 4; x++){
+           System.out.print(decochar);
+       }
+       System.out.println();
+       System.out.println(decochar + " " + s + " " + decochar);
+       for(int x = 0; x< length + 4; x++){
+            System.out.print(decochar);
+       }
+       System.out.println();
+    }
+
+    @Override
+    public Product createClone() {
+        Product product = null;
+        try {
+            product = (Product)clone();
+        } catch (CloneNotSupportedException e){
+            e.printStackTrace();
+        }
+        return product;
+    }
+}
Index: src/main/java/com/kangjian/designpattern/prototypemodule/UnderlinePen.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/com/kangjian/designpattern/prototypemodule/UnderlinePen.java	(date 1543770590000)
+++ src/main/java/com/kangjian/designpattern/prototypemodule/UnderlinePen.java	(date 1543770590000)
@@ -0,0 +1,31 @@
+package com.kangjian.designpattern.prototypemodule;
+
+public class UnderlinePen implements Product{
+
+    private char unlinechar;
+
+    public UnderlinePen(char unlinechar){
+        this.unlinechar = unlinechar;
+    }
+
+    @Override
+    public void use(String s) {
+       System.out.println("\"" + s + "\"");
+       for (int x = 0; x < s.length() + 2 ; x++){
+           System.out.print(unlinechar);
+       }
+       System.out.println();
+
+    }
+
+    @Override
+    public Product createClone() {
+        Product p = null;
+        try {
+            p = (Product)clone();
+        } catch (CloneNotSupportedException e) {
+            e.printStackTrace();
+        }
+        return p;
+    }
+}
